source "mila_material_mia_functions.mel";
//source "AEupgradeMiShader";

// Use radio buttons instead of check boxes for the "thin_walled" and
// "do_refractive_caustics" attributes for better usability
global proc AEmila_material_miaTransCustomNew(string $thinWalled, string $refractiveCaustics) {
	rowLayout -nc 2 -columnWidth2 146 100 -columnAttach2 "left" "left";
		text -label " " "dummyText";
		columnLayout;
		radioCollection thinCollection;
			radioButton -label (getPluginResource("Mayatomr", "kThinWalled"))
				-data 1
				-annotation (getPluginResource("Mayatomr", "kThinWalledAnn"))
				thinRadio;
			radioButton -label (getPluginResource("Mayatomr", "kSolid"))
				-data 0
				-annotation (getPluginResource("Mayatomr", "kSolidAnn"))
				solidRadio;
		connectControl thinCollection $thinWalled;
		setParent ..;
	setParent ..;

	separator -height 10;
	
	rowLayout -nc 2 -columnWidth 1 146 -columnAttach2 "left" "left";
		text -label " " "dummyText";
		columnLayout;
		radioCollection refrCausticCollection;
			radioButton -label (getPluginResource("Mayatomr", "kRefrCaustic"))
				-data 1
				-annotation (getPluginResource("Mayatomr", "kRefrCausticAnn"))
				refrCausticRadio;
			radioButton -label (getPluginResource("Mayatomr", "kTransShadow"))
				-data 0
				-annotation (getPluginResource("Mayatomr", "kTransShadowAnn"))
				transShadowRadio;
		connectControl refrCausticCollection $refractiveCaustics;
		setParent ..;
	setParent ..;

	separator -height 10;
}

global proc AEmila_material_miaTransCustomReplace(string $thinWalled, string $refractiveCaustics) {
	connectControl thinCollection $thinWalled;
	connectControl refrCausticCollection $refractiveCaustics;
}

//************************************************************************************	

global proc AEmila_material_miaTemplate(string $nodeName)  {
	// Most of this attribute editor is generated through code shared with the
	// AE for mila_material_mia_material_x (see mila_material_mia_material_functions.mel). Any truly custom
	// UI must be done individually for each AE though, because if the control
	// names are shared, we sometimes get clashes when switching between the
	// attribute editors for mila_material_mia_material and mila_material_mia_material_x

	AEswatchDisplay $nodeName;
	editorTemplate -beginScrollLayout;

	AEmila_material_miaMaterialDiffuse;
	AEmila_material_miaMaterialScatter;
	AEmila_material_miaMaterialReflection;
	// custom UI is used for "thin_walled" and "do_refractive_caustics" attrs,
	// so pass custom functions to be used
	//AEmila_material_miaMaterialRefraction("AEmila_material_miaTransCustomNew", "AEmila_material_miaTransCustomReplace");
	AEmila_material_miaMaterialAnisotropy;
	AEmila_material_miaMaterialBrdf;
	AEmila_material_miaMaterialTranslucency;

	// mila_material_mia_material_x has some extra attrs in these two sections, so there is
	// less code-sharing than there is in the other sections
	//editorTemplate -beginLayout (getPluginResource("Mayatomr", "kBump")) -collapse 1;
	//	AEmila_material_miaMaterialBump;
	//editorTemplate -endLayout;

	//editorTemplate -beginLayout (getPluginResource("Mayatomr", "kAdvanced")) -collapse 1;
	//	AEmila_material_miaMaterialAdditional;
	//editorTemplate -endLayout;

	// Upgrade shader
	//editorTemplate -beginLayout (getPluginResource("Mayatomr", "kUpgrade")) -collapse 1;
	//editorTemplate -callCustom
	//	"AEupgradeMiShaderNew \"mila_material_mia_material_x\" \"_x\" "
	//	"AEupgradeMiShaderReplace \"mila_material_mia_material_x\" \"_x\" "
	//	"message";
	//editorTemplate -callCustom
	//	"AEupgradeMiShaderNew \"mila_material_mia_material_x_passes\" \"_passes\" "
	//	"AEupgradeMiShaderReplace \"mila_material_mia_material_x_passes\" \"_passes\" "
	//	"message";
	//editorTemplate -endLayout;

	AEmentalrayCommonMaterialTemplate($nodeName, 1, "diffuse");

	editorTemplate -endScrollLayout;
	

	//editorTemplate -suppress "brdf_conserve_energy";
	editorTemplate -suppress "caching"; 
	editorTemplate -suppress "nodeState"; 
}